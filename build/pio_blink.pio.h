// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// --------- //
// pio_blink //
// --------- //

#define pio_blink_wrap_target 0
#define pio_blink_wrap 16
#define pio_blink_pio_version 0

static const uint16_t pio_blink_program_instructions[] = {
            //     .wrap_target
    0xff01, //  0: set    pins, 1                [31]
    0xbf42, //  1: nop                           [31]
    0xbf42, //  2: nop                           [31]
    0xbf42, //  3: nop                           [31]
    0xbf42, //  4: nop                           [31]
    0xbf42, //  5: nop                           [31]
    0xbf42, //  6: nop                           [31]
    0xbf42, //  7: nop                           [31]
    0xff00, //  8: set    pins, 0                [31]
    0xbf42, //  9: nop                           [31]
    0xbf42, // 10: nop                           [31]
    0xbf42, // 11: nop                           [31]
    0xbf42, // 12: nop                           [31]
    0xbf42, // 13: nop                           [31]
    0xbf42, // 14: nop                           [31]
    0xbf42, // 15: nop                           [31]
    0x0000, // 16: jmp    0
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program pio_blink_program = {
    .instructions = pio_blink_program_instructions,
    .length = 17,
    .origin = -1,
    .pio_version = pio_blink_pio_version,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config pio_blink_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + pio_blink_wrap_target, offset + pio_blink_wrap);
    return c;
}
#endif

